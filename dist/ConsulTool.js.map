{"version":3,"sources":["../src/ConsulTool.js"],"names":["ConsulTool","autobind","constructor","toolName","log","export","rootKey","keys","consul","kv","object","key","entry","get","Value","json","JSON","stringify","flatten","unflatten","delimiter","console","error","Error","import","fileName","data","JSON5","parse","fs","readFile","Object","value","set","info","run","argv","options","string","boolean","alias","default","args","version","fullVersion","command","_","toLowerCase","promisify","subCommand","help"],"mappings":"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","file":"ConsulTool.js","sourcesContent":["import parseArgs from \"minimist\"\nimport JSON5 from \"json5\"\nimport { fullVersion } from \"./version\"\nimport consul from \"consul\"\nimport flatten from \"flat\"\nimport autobind from \"autobind-decorator\"\nimport { promises as fs } from \"fs\"\n\n@autobind\nexport class ConsulTool {\n  constructor(toolName, log) {\n    this.toolName = toolName\n    this.log = log\n  }\n\n  async export(rootKey) {\n    try {\n      const keys = await this.consul.kv.keys(rootKey)\n      let object = {}\n\n      for (const key of keys) {\n        const entry = await this.consul.kv.get(key)\n        object[key] = entry.Value\n      }\n\n      const json = JSON.stringify(\n        flatten.unflatten(object, { delimiter: \"/\" }),\n        null,\n        \"  \"\n      )\n\n      console.log(json)\n    } catch (error) {\n      throw new Error(`Root key '${rootKey}' was not found`)\n    }\n  }\n\n  async import(fileName) {\n    const data = JSON5.parse(await fs.readFile(fileName))\n    const object = flatten(data, { delimiter: \"/\" })\n\n    for (const key of Object.keys(object)) {\n      const value = object[key]\n\n      try {\n        await this.consul.kv.set(key, value)\n      } catch (error) {\n        throw new Error(`Unable to write key '${key}'`)\n      }\n\n      this.log.info(`Set key '${key}' to '${value}'`)\n    }\n  }\n\n  async run(argv) {\n    const options = {\n      string: [],\n      boolean: [\"help\", \"version\", \"debug\"],\n      alias: {},\n      default: {},\n    }\n\n    this.args = parseArgs(argv, options)\n\n    if (this.args.version) {\n      this.log.info(`v${fullVersion}`)\n      return 0\n    }\n\n    let command = this.args._[0]\n\n    command = command ? command.toLowerCase() : \"help\"\n\n    this.consul = consul({ promisify: true })\n\n    switch (command) {\n      case \"kv\":\n        const subCommand = this.args._[1]\n\n        if (this.args.help || !subCommand) {\n          this.log.info(`Usage: ${this.toolName} kv <sub-command> <options>\n\nDescription:\n\nOperations on the key/value store\n\nSub-Commands:\n  json-export     Export keys in JSON format\n  json-import     Import keys from JSON/JSON5 format\n`)\n          return 0\n        }\n\n        switch (subCommand) {\n          case \"json-export\":\n            if (this.args.help) {\n              this.log.info(`Usage: ${this.toolName} kv json-export <root-key>\n\nDescription:\n\nExports keys from a JSON file.\n`)\n              return 0\n            }\n            const rootKey = this.args._[2] || \"\"\n\n            await this.export(rootKey)\n            break\n\n          case \"json-import\":\n            if (this.args.help) {\n              this.log.info(`Usage: ${this.toolName} kv json-import <file>\n\nDescription:\n\nImports keys from a JSON/JSON5 file.\n`)\n              return 0\n            }\n            const fileName = this.args._[2]\n\n            if (!fileName) {\n              throw new Error(`No file name specified`)\n            }\n\n            await this.import(fileName)\n            break\n          default:\n            throw new Error(`Unknown 'kv' sub-command '${subCommand}'`)\n        }\n        break\n\n      case \"help\":\n      default:\n        this.log.info(`\nConsul Tool\n\nUsage: ${this.toolName} <command> ...\n\nProvides extended functionality for the consul command line tool.\n\nCommands:\n  kv        Operations related to the key/value store\n\nGlobal Options:\n--help      Displays this help\n--version   Displays tool version\n--debug     Show debug output\n`)\n        return 0\n    }\n\n    return 0\n  }\n}\n"]}