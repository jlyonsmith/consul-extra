{"version":3,"sources":["../src/ConsulTool.js"],"names":["ConsulTool","autobind","constructor","toolName","log","export","rootKey","keys","consul","kv","object","key","entry","get","Value","json","JSON","stringify","flatten","unflatten","delimiter","console","error","Error","import","fileName","data","JSON5","parse","fs","readFile","Object","value","set","info","leader","result","status","peers","results","forEach","run","argv","options","string","boolean","alias","default","args","debug","version","fullVersion","command","_","toLowerCase","subCommand","length","promisify","help"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport JSON5 from \"json5\"\nimport { fullVersion } from \"./version\"\nimport consul from \"consul\"\nimport flatten from \"flat\"\nimport autobind from \"autobind-decorator\"\nimport { promises as fs } from \"fs\"\n\n@autobind\nexport class ConsulTool {\n  constructor(toolName, log) {\n    this.toolName = toolName\n    this.log = log\n  }\n\n  async export(rootKey) {\n    try {\n      const keys = await this.consul.kv.keys(rootKey)\n      let object = {}\n\n      for (const key of keys) {\n        const entry = await this.consul.kv.get(key)\n        object[key] = entry.Value\n      }\n\n      const json = JSON.stringify(\n        flatten.unflatten(object, { delimiter: \"/\" }),\n        null,\n        \"  \"\n      )\n\n      console.log(json)\n    } catch (error) {\n      throw new Error(`Root key '${rootKey}' was not found`)\n    }\n  }\n\n  async import(fileName) {\n    const data = JSON5.parse(await fs.readFile(fileName))\n    const object = flatten(data, { delimiter: \"/\" })\n\n    for (const key of Object.keys(object)) {\n      const value = object[key]\n\n      try {\n        await this.consul.kv.set(key, value)\n      } catch (error) {\n        throw new Error(`Unable to write key '${key}'`)\n      }\n\n      this.log.info(`Set key '${key}' to '${value}'`)\n    }\n  }\n\n  async leader() {\n    const result = await this.consul.status.leader()\n\n    this.log.info(result)\n  }\n\n  async peers() {\n    const results = await this.consul.status.peers()\n\n    results.forEach((result) => this.log.info(result))\n  }\n\n  async run(argv) {\n    const options = {\n      string: [],\n      boolean: [\"help\", \"version\", \"debug\"],\n      alias: {},\n      default: {},\n    }\n\n    let args = parseArgs(argv, options)\n\n    this.debug = args.debug\n\n    if (args.version) {\n      this.log.info(`v${fullVersion}`)\n      return 0\n    }\n\n    let command = args._[0]\n\n    command = command ? command.toLowerCase() : \"help\"\n    const subCommand = args._.length > 0 ? args._[1] : \"\"\n\n    this.consul = consul({ promisify: true })\n\n    switch (command) {\n      case \"kv\":\n        if (args.help && !subCommand) {\n          this.log.info(`Usage: ${this.toolName} kv <sub-command> <options>\n\nDescription:\n\nOperations on the key/value store\n\nSub-Commands:\n  export     Export keys in JSON format\n  import     Import keys from JSON/JSON5 format\n`)\n          return 0\n        }\n\n        switch (subCommand) {\n          case \"json-export\":\n          case \"export\":\n            if (args.help) {\n              this.log.info(`Usage: ${this.toolName} kv export <root-key>\n\nDescription:\n\nExports keys from a JSON file.\n`)\n              return 0\n            }\n            const rootKey = args._[2] || \"\"\n\n            await this.export(rootKey)\n            break\n\n          case \"json-import\":\n          case \"import\":\n            if (args.help) {\n              this.log.info(`Usage: ${this.toolName} kv import <file>\n\nDescription:\n\nImports keys from a JSON/JSON5 file.\n`)\n              return 0\n            }\n            const fileName = args._[2]\n\n            if (!fileName) {\n              throw new Error(`No file name specified`)\n            }\n\n            await this.import(fileName)\n            break\n          default:\n            throw new Error(`Unknown 'kv' sub-command '${subCommand}'`)\n        }\n        break\n\n      case \"status\":\n        if (args.help && !subCommand) {\n          this.log.info(`Usage: ${this.toolName} status <sub-command> <options>\n\nDescription:\n\nOperations on the key/value store\n\nSub-Commands:\n  leader    Show the current raft leader\n  pers      Return the current raft peer set\n`)\n          return 0\n        }\n\n        switch (subCommand) {\n          case \"leader\":\n            if (args.help) {\n              this.log.info(`Usage: ${this.toolName} status leader\n\nShow the current raft leader.\n`)\n              return 0\n            }\n            await this.leader()\n            break\n\n          case \"peers\":\n            if (args.help) {\n              this.log.info(`Usage: ${this.toolName} status peers\n\nShow the current raft peers.\n`)\n              return 0\n            }\n            await this.peers()\n            break\n\n          default:\n            throw new Error(`Unknown 'status' sub-command '${subCommand}'`)\n        }\n        break\n\n      case \"help\":\n      default:\n        this.log.info(`\nUsage: ${this.toolName} <command> ...\n\nProvides extended functionality for the consul command line tool.\n\nCommands:\n  kv          Operations related to the key/value store\n  status      Status operations\n\nGlobal Options:\n  --help      Displays this help\n  --version   Displays tool version\n  --debug     Show debug output\n`)\n        return 0\n    }\n\n    return 0\n  }\n}\n"],"file":"ConsulTool.js"}